using apointify.ExtentionMethods;
using apointify.Models;
using apointify.VirtualModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;


namespace apointify.Controllers
{
    public class CustomerController : Controller
    {
        private readonly IHttpContextAccessor _contx;


        OmParmarContext dbEntities = new OmParmarContext();

        public IActionResult Index()
        {
            
            var Customer = dbEntities.Customers.ToList();
            return View(Customer);
        }
        [HttpGet, Route("Customer/Edit")]
        public  IActionResult Edit(int Id) 
        {
            Customer dbObject = dbEntities.Customers.Where(m => m.CustomerId == Id).FirstOrDefault();
            return View(dbObject);
        }
        //[HttpPost, Route("Customer/EditData")]
        public IActionResult EditData(CustomerVM customer)
        {
            

            Customer dbObject = dbEntities.Customers.Where(m => m.CustomerId == customer.CustomerId).FirstOrDefault();
            if(customer.CustomerId == 0)
            {

                Customer obj = customer.ToContext();
                // to avoid conflict of autogenerated id
                obj.CustomerId = new int();
                dbEntities.Customers.Add(obj);
                dbEntities.SaveChanges();

            }
            else 
            { 
                    
                dbObject.FirstName = customer.FirstName;
                dbObject.LastName = customer.LastName;
                dbObject.MobileNo = customer.MobileNo;
                dbObject.BirthDate = customer.BirthDate;
                dbObject.UserName = customer.UserName;
                dbObject.UserEmailAddress = customer.UserEmailAddress;
                dbObject.Password = customer.Password;
                dbObject.HomeAddress = customer.HomeAddress;
                dbObject.City = customer.City;
                dbObject.State = customer.State;
                dbObject.Zipcode = customer.Zipcode;
                dbEntities.SaveChanges();
            }
            return RedirectToAction("Index");
        }
        public IActionResult Delete(int Id)
        {

            Customer dbObject = dbEntities.Customers.Where(m => m.CustomerId == Id).FirstOrDefault();
            dbEntities.Customers.Remove(dbObject);
            dbEntities.SaveChanges();

            return RedirectToAction("Index");
        }
        public IActionResult Details(int Id)
        {
            Customer dbObject = dbEntities.Customers.Where(m => m.CustomerId == Id).FirstOrDefault();
            return View(dbObject);
        }
    }
}

    using apointify.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient;
using apointify.ExtentionMethods;
using apointify.VirtualModels;
using System.Collections.Generic;
using System.Net.Mail;
using System.Net;
using System.Text;

namespace apointify.Controllers
{
    public class LoginController : Controller
    {
        OmParmarContext DBEntities = new OmParmarContext();

        private readonly IHttpContextAccessor _contx;
        public interface ILoginValidation
        {
            public List<User> ValidateUserLogin(User user);
        }

        public string Constr { get; set; }
        public IConfiguration _configuration;
        public SqlConnection con;
        public LoginController(IConfiguration configuration, IHttpContextAccessor httpContextAccessor)
        {
            _contx = httpContextAccessor;
            _configuration = configuration;
            Constr = _configuration.GetConnectionString("Default");
        }
        public IActionResult Index()
        {

            return View();
        }
        public IActionResult SignUp()
        {

            return View();
        }






        [HttpPost]
        public IActionResult ValidateCustomerLogin(User users)
        {
            User user = new User();
            try
            {

                using (con = new SqlConnection(Constr))
                {
                    con.Open();
                    var cmd = new SqlCommand("Proc_Login_authentication", con);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Email", users.Email);
                    cmd.Parameters.AddWithValue("@Password", users.Password);
                    SqlParameter outputPara = new SqlParameter();
                    outputPara.ParameterName = "@Email";
                    SqlDataReader rdr = cmd.ExecuteReader();
                    //var  userse = rdr.Read().ResultView();

                    while (rdr.Read())
                    {

                        //user.UserId = Convert.ToInt32(rdr["userId"]);
                        user.Email = rdr["Email"].ToString();
                        user.Password = rdr["Password"].ToString();
                        user.Role = Convert.ToInt32(rdr["Role"]);
                        user.UserId = Convert.ToInt32(rdr["UserId"]);
                        user.MobileNumber = rdr["MobileNumber"].ToString();
                        user.Name = rdr["Name"].ToString();
                        user.City = rdr["City"].ToString();


                    }
                }
                //_contx.HttpContext.Session.;
                if (user.UserId == 0)
                {
                    ViewBag.message = "Please Enter Valid Email and Password.";
                    return View("Index");
                }
                else
                {
                    _contx.HttpContext.Session.SetString("Email", user.Email);
                    _contx.HttpContext.Session.SetString("Password", user.Password);
                    _contx.HttpContext.Session.SetString("Name", user.Name);
                    _contx.HttpContext.Session.SetString("Role", Convert.ToString(user.Role));
                    _contx.HttpContext.Session.SetString("UserId", Convert.ToString(user.UserId));
                    _contx.HttpContext.Session.SetString("mobile", user.MobileNumber);
                    _contx.HttpContext.Session.SetString("City", user.City);
                    return RedirectToAction("Index", "Home");
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IActionResult newa()
        {
            return RedirectToAction("Index", "Login");
        }



        public IActionResult createUser(UserVM user)
        {
            OmParmarContext DBEntities = new OmParmarContext();
            if (user.Role == 1)
            {
                User users = DBEntities.Users.Where(m => m.UserId == user.UserId).FirstOrDefault();
                if (user.UserId == 0)
                {

                    User obj = user.ToContext();
                    // to avoid conflict of autogenerated id
                    obj.UserId = new int();
                    DBEntities.Users.Add(obj);
                    DBEntities.SaveChanges();
                    var id = obj.UserId;
                    _contx.HttpContext.Session.SetString("UserId", Convert.ToString(obj.UserId));
                    return RedirectToAction("CreateFirm", "ServiceProvider");
                }
                else
                {
                    var dbObject = DBEntities.Users.Where(m => m.UserId == user.UserId).FirstOrDefault();
                    dbObject.Role = user.Role;
                    dbObject.Username = user.Username;
                    dbObject.Name = user.Name;
                    dbObject.Email = user.Email;
                    dbObject.Password = user.Password;
                    dbObject.MobileNumber = user.MobileNumber;
                    dbObject.City = user.City;
                    dbObject.UpdatedDate = DateTime.Now;
                    DBEntities.SaveChanges();

                    _contx.HttpContext.Session.SetString("Email", dbObject.Email);
                    _contx.HttpContext.Session.SetString("Password", dbObject.Password);
                    _contx.HttpContext.Session.SetString("Name", dbObject.Name);
                    _contx.HttpContext.Session.SetString("Role", Convert.ToString(dbObject.Role));
                    _contx.HttpContext.Session.SetString("UserId", Convert.ToString(dbObject.UserId));
                    _contx.HttpContext.Session.SetString("mobile", dbObject.MobileNumber);
                    _contx.HttpContext.Session.SetString("City", dbObject.City);
                    return RedirectToAction("UserProfile", new { Id = user.UserId });
                }

            }
            else
            {
                User users = DBEntities.Users.Where(m => m.UserId == user.UserId).FirstOrDefault();
                if (user.UserId == 0)
                {

                    User obj = user.ToContext();
                    // to avoid conflict of autogenerated id
                    obj.UserId = new int();
                    DBEntities.Users.Add(obj);
                    DBEntities.SaveChanges();
                    var id = obj.UserId;
                    return RedirectToAction("Index", "Login");
                }
                else
                {
                    var dbObject = DBEntities.Users.Where(m => m.UserId == user.UserId).FirstOrDefault();
                    dbObject.Role = user.Role;
                    dbObject.Username = user.Username;
                    dbObject.Name = user.Name;
                    dbObject.Email = user.Email;
                    dbObject.Password = user.Password;
                    dbObject.MobileNumber = user.MobileNumber;
                    dbObject.City = user.City;
                    dbObject.UpdatedDate = DateTime.Now;
                    DBEntities.SaveChanges();

                    _contx.HttpContext.Session.SetString("Email", dbObject.Email);
                    _contx.HttpContext.Session.SetString("Password", dbObject.Password);
                    _contx.HttpContext.Session.SetString("Name", dbObject.Name);
                    _contx.HttpContext.Session.SetString("Role", Convert.ToString(dbObject.Role));
                    _contx.HttpContext.Session.SetString("UserId", Convert.ToString(dbObject.UserId));
                    _contx.HttpContext.Session.SetString("mobile", dbObject.MobileNumber);
                    _contx.HttpContext.Session.SetString("City", dbObject.City);
                    return RedirectToAction("UserProfile", new { Id = user.UserId });
                }

            }




        }

        public IActionResult UserProfile(int Id)
        {

            var dbObject = DBEntities.Users.Where(m => m.UserId == Id).FirstOrDefault();

            return View(dbObject);

        }

        [HttpGet]
        public ActionResult ForgotPassword()
        {
            return View();
        }




        

        [HttpPost]
        public ActionResult ForgotPassword(string EmailID)
        {
            /*string resetCode = Guid.NewGuid().ToString();
            var verifyUrl = "/Account/ResetPassword/" + resetCode;
            
            Request.Url.AbsoluteUri.Replace(Request.Url.PathAndQuery, verifyUrl);*/
            using (var context = new OmParmarContext())
            {
                var getUser = (from s in context.Users where s.Email == EmailID select s).FirstOrDefault();
                if (getUser != null)
                {

                    var password = getUser.Password;
                    Random otp = new Random();
                    int otp1 = otp.Next(1000, 9999);


                    //This line I have added here to avoid confirm password not match issue , as we had added a confirm password property 

                    /*context.Configuration.ValidateOnSaveEnabled = false;*/
                    StringBuilder msg = new StringBuilder();
                    msg.AppendLine($"Hello {getUser.Name}");
                    msg.AppendLine("You recently requested to reset your password for your account.Your Current password is");
                    msg.AppendLine($"email : {getUser.Email}");
                    msg.AppendLine($"OTP : {otp1}");
                    var subject = "Password Reset Request";
                    //var body = "Hello" + getUser.Name +
                    //            ",<br/>You recently requested to reset your password for your account.Your Current password is " +
                    //            password + " <br/><br/>" +"If you did not request a password reset, please ignore this email or reply to let us know.<br/><br/> Thank you";


                    string bodyWithOtp = msg.ToString();
                    SendEmail(getUser.Email, bodyWithOtp, subject);
                    ViewBag.Message = "Password has been sent to your email address.";
                    ViewBag.msg = otp1;
                    return View();
                }
                else
                {
                    ViewBag.Message = "User doesn't exists.";
                    return View();
                }
            }
        }
        private void SendEmail(string emailAddress, string body, string subject)
        {
            using (MailMessage mm = new System.Net.Mail.MailMessage("youremail@gmail.com", emailAddress))
            {
                mm.Subject = subject;
                mm.Body = body;

                mm.IsBodyHtml = true;
                SmtpClient smtp = new SmtpClient();
                smtp.Host = "smtp.gmail.com";
                smtp.EnableSsl = true;
                NetworkCredential NetworkCred = new System.Net.NetworkCredential("tarwin1272@gmail.com", "fkhblvjiimwjfmmc");
                /*NetworkCred.Domain = ".com";
                */
                /*smtp.UseDefaultCredentials = true;*/
                smtp.Credentials = NetworkCred;
                smtp.Port = 587;
                smtp.Send(mm);

            }

        }



        [HttpGet]
        public ActionResult reset(string email)
        {
            
            

            return View();
        }

        [HttpPost]
        public ActionResult reset(string password,string email)
        {
            User resetUser = DBEntities.Users.Where(m => m.Email == email).FirstOrDefault();
            resetUser.Password = password;
            DBEntities.SaveChanges();

            return RedirectToAction("Index");
        }

    }
}
